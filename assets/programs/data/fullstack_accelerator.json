{
  "id": "6",
  "name": "The Full-Stack Accelerator",
  "shortDescription": "Build complete web applications from front-end to back-end",
  "fullDescription": "Become a versatile full-stack developer capable of building modern web applications end-to-end. Learn front-end frameworks, back-end technologies, databases, and deployment strategies.",
  "duration": "16 weeks",
  "difficulty": "beginner",
  "thumbnailPath": "assets/programs/fullstack.webp",
  "author": "Emily Zhang",
  "authorBio": "Full-stack developer and educator with 9 years of experience. Former lead developer at tech startups and passionate about teaching modern web development.",
  "isComingSoon": false,
  "modules": [
    {
      "title": "Web Development Fundamentals",
      "description": "HTML, CSS, JavaScript, and responsive design",
      "duration": "3 weeks",
      "order": 1,
      "content": "# Web Development Fundamentals\n\n## Welcome to Web Development\n\nWeb development is the art and science of creating websites and web applications. This module covers the foundational technologies that power the modern web.\n\n## The Web: How It Works\n\n### Client-Server Architecture\n\n```\nClient (Browser) ←→ HTTP/HTTPS ←→ Server\n       ↓                              ↓\n  HTML/CSS/JS                    Backend Code\n                                      ↓\n                                  Database\n```\n\n### What Happens When You Visit a Website?\n\n1. **DNS Lookup**: Browser finds the server's IP address\n2. **HTTP Request**: Browser requests the webpage\n3. **Server Processing**: Server processes the request\n4. **HTTP Response**: Server sends HTML, CSS, JavaScript\n5. **Rendering**: Browser displays the page\n\n## HTML: Structure of the Web\n\n### HTML Basics\n\nHTML (HyperText Markup Language) provides the structure and content of web pages.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My First Web Page</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <header>\n        <h1>Welcome to My Website</h1>\n        <nav>\n            <ul>\n                <li><a href=\"#home\">Home</a></li>\n                <li><a href=\"#about\">About</a></li>\n                <li><a href=\"#contact\">Contact</a></li>\n            </ul>\n        </nav>\n    </header>\n    \n    <main>\n        <section id=\"home\">\n            <h2>Home Section</h2>\n            <p>This is the home section of my website.</p>\n        </section>\n        \n        <section id=\"about\">\n            <h2>About Me</h2>\n            <p>I'm learning web development!</p>\n        </section>\n    </main>\n    \n    <footer>\n        <p>&copy; 2025 My Website. All rights reserved.</p>\n    </footer>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>\n```\n\n### Semantic HTML\n\nUse semantic tags for better SEO and accessibility:\n\n```html\n<!-- Semantic Elements -->\n<header>   <!-- Page or section header -->\n<nav>      <!-- Navigation links -->\n<main>     <!-- Main content -->\n<article>  <!-- Independent content -->\n<section>  <!-- Thematic grouping -->\n<aside>    <!-- Sidebar content -->\n<footer>   <!-- Page or section footer -->\n<figure>   <!-- Image with caption -->\n<time>     <!-- Date/time -->\n```\n\n### Forms and Input\n\n```html\n<form action=\"/submit\" method=\"POST\">\n    <div>\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" id=\"name\" name=\"name\" required>\n    </div>\n    \n    <div>\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" required>\n    </div>\n    \n    <div>\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" id=\"password\" name=\"password\" \n               minlength=\"8\" required>\n    </div>\n    \n    <div>\n        <label for=\"country\">Country:</label>\n        <select id=\"country\" name=\"country\">\n            <option value=\"\">Select...</option>\n            <option value=\"us\">United States</option>\n            <option value=\"uk\">United Kingdom</option>\n            <option value=\"ca\">Canada</option>\n        </select>\n    </div>\n    \n    <div>\n        <label>\n            <input type=\"checkbox\" name=\"subscribe\" value=\"yes\">\n            Subscribe to newsletter\n        </label>\n    </div>\n    \n    <button type=\"submit\">Submit</button>\n</form>\n```\n\n## CSS: Styling the Web\n\n### CSS Basics\n\nCSS (Cascading Style Sheets) controls the presentation and layout.\n\n```css\n/* Selectors */\nh1 { /* Element selector */\n    color: #333;\n    font-size: 2.5rem;\n    margin-bottom: 1rem;\n}\n\n.button { /* Class selector */\n    background-color: #007bff;\n    color: white;\n    padding: 10px 20px;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n}\n\n#header { /* ID selector */\n    background-color: #f8f9fa;\n    padding: 20px;\n}\n\n/* Pseudo-classes */\na:hover {\n    color: #0056b3;\n    text-decoration: underline;\n}\n\nbutton:active {\n    transform: scale(0.98);\n}\n\ninput:focus {\n    outline: 2px solid #007bff;\n}\n```\n\n### Box Model\n\n```css\n.box {\n    /* Content */\n    width: 300px;\n    height: 200px;\n    \n    /* Padding (inside) */\n    padding: 20px;\n    \n    /* Border */\n    border: 2px solid #333;\n    \n    /* Margin (outside) */\n    margin: 10px;\n    \n    /* Box sizing */\n    box-sizing: border-box; /* Include padding and border in width */\n}\n```\n\n### Flexbox Layout\n\n```css\n.container {\n    display: flex;\n    flex-direction: row; /* row, column */\n    justify-content: space-between; /* flex-start, center, flex-end, space-around */\n    align-items: center; /* flex-start, center, flex-end, stretch */\n    gap: 20px;\n}\n\n.item {\n    flex: 1; /* Grow to fill space */\n}\n\n.item-fixed {\n    flex: 0 0 200px; /* Don't grow, don't shrink, 200px wide */\n}\n```\n\n### Grid Layout\n\n```css\n.grid-container {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr); /* 3 equal columns */\n    grid-template-rows: auto;\n    gap: 20px;\n}\n\n/* Responsive grid */\n.responsive-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 20px;\n}\n\n/* Grid item spanning */\n.wide-item {\n    grid-column: span 2; /* Span 2 columns */\n}\n```\n\n### Responsive Design\n\n```css\n/* Mobile-first approach */\n.container {\n    padding: 10px;\n}\n\n/* Tablet */\n@media (min-width: 768px) {\n    .container {\n        padding: 20px;\n    }\n}\n\n/* Desktop */\n@media (min-width: 1024px) {\n    .container {\n        max-width: 1200px;\n        margin: 0 auto;\n        padding: 40px;\n    }\n}\n```\n\n## JavaScript: Interactivity\n\n### JavaScript Basics\n\n```javascript\n// Variables\nconst PI = 3.14159; // Cannot be reassigned\nlet count = 0; // Can be reassigned\nvar oldWay = \"avoid\"; // Function-scoped (use let/const instead)\n\n// Data types\nconst name = \"John\"; // String\nconst age = 30; // Number\nconst isActive = true; // Boolean\nconst user = { // Object\n    name: \"Jane\",\n    email: \"jane@example.com\"\n};\nconst numbers = [1, 2, 3, 4, 5]; // Array\n\n// Functions\nfunction greet(name) {\n    return `Hello, ${name}!`;\n}\n\n// Arrow functions\nconst greetArrow = (name) => `Hello, ${name}!`;\n\n// Array methods\nconst doubled = numbers.map(n => n * 2);\nconst evens = numbers.filter(n => n % 2 === 0);\nconst sum = numbers.reduce((acc, n) => acc + n, 0);\n\n// Destructuring\nconst { name: userName, email } = user;\nconst [first, second, ...rest] = numbers;\n\n// Spread operator\nconst morNumbers = [...numbers, 6, 7, 8];\nconst userCopy = { ...user, age: 25 };\n```\n\n### DOM Manipulation\n\n```javascript\n// Select elements\nconst heading = document.querySelector('h1');\nconst buttons = document.querySelectorAll('.button');\nconst form = document.getElementById('myForm');\n\n// Modify content\nheading.textContent = 'New Heading';\nheading.innerHTML = '<span>Styled</span> Heading';\n\n// Modify styles\nheading.style.color = 'blue';\nheading.style.fontSize = '2rem';\n\n// Add/remove classes\nheading.classList.add('highlight');\nheading.classList.remove('old-class');\nheading.classList.toggle('active');\n\n// Create elements\nconst newDiv = document.createElement('div');\nnewDiv.textContent = 'New element';\nnewDiv.className = 'box';\ndocument.body.appendChild(newDiv);\n\n// Event listeners\nconst button = document.querySelector('#myButton');\nbutton.addEventListener('click', function(event) {\n    console.log('Button clicked!');\n    event.preventDefault(); // Prevent default behavior\n});\n\n// Form handling\nform.addEventListener('submit', function(event) {\n    event.preventDefault();\n    \n    const formData = new FormData(form);\n    const data = Object.fromEntries(formData);\n    \n    console.log('Form data:', data);\n});\n```\n\n### Async JavaScript\n\n```javascript\n// Promises\nfetch('https://api.example.com/data')\n    .then(response => response.json())\n    .then(data => console.log(data))\n    .catch(error => console.error('Error:', error));\n\n// Async/Await (cleaner syntax)\nasync function fetchData() {\n    try {\n        const response = await fetch('https://api.example.com/data');\n        const data = await response.json();\n        console.log(data);\n    } catch (error) {\n        console.error('Error:', error);\n    }\n}\n\n// Multiple async operations\nasync function fetchMultiple() {\n    const [users, posts] = await Promise.all([\n        fetch('/api/users').then(r => r.json()),\n        fetch('/api/posts').then(r => r.json())\n    ]);\n    \n    return { users, posts };\n}\n```\n\n## Building a Complete Page\n\n### Project: Todo List App\n\n**HTML**:\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Todo List</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>My Todo List</h1>\n        \n        <form id=\"todoForm\">\n            <input type=\"text\" id=\"todoInput\" \n                   placeholder=\"Add a new task...\" required>\n            <button type=\"submit\">Add</button>\n        </form>\n        \n        <ul id=\"todoList\"></ul>\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>\n```\n\n**CSS**:\n```css\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    min-height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 20px;\n}\n\n.container {\n    background: white;\n    border-radius: 10px;\n    padding: 30px;\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\n    max-width: 500px;\n    width: 100%;\n}\n\nh1 {\n    color: #333;\n    margin-bottom: 20px;\n    text-align: center;\n}\n\n#todoForm {\n    display: flex;\n    gap: 10px;\n    margin-bottom: 20px;\n}\n\n#todoInput {\n    flex: 1;\n    padding: 12px;\n    border: 2px solid #ddd;\n    border-radius: 5px;\n    font-size: 16px;\n}\n\n#todoInput:focus {\n    outline: none;\n    border-color: #667eea;\n}\n\nbutton {\n    background: #667eea;\n    color: white;\n    border: none;\n    padding: 12px 24px;\n    border-radius: 5px;\n    cursor: pointer;\n    font-size: 16px;\n    transition: background 0.3s;\n}\n\nbutton:hover {\n    background: #5568d3;\n}\n\n#todoList {\n    list-style: none;\n}\n\n.todo-item {\n    background: #f8f9fa;\n    padding: 15px;\n    margin-bottom: 10px;\n    border-radius: 5px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    transition: all 0.3s;\n}\n\n.todo-item:hover {\n    transform: translateX(5px);\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n}\n\n.todo-item.completed {\n    opacity: 0.6;\n    text-decoration: line-through;\n}\n\n.delete-btn {\n    background: #dc3545;\n    padding: 8px 16px;\n    font-size: 14px;\n}\n\n.delete-btn:hover {\n    background: #c82333;\n}\n```\n\n**JavaScript**:\n```javascript\nconst todoForm = document.getElementById('todoForm');\nconst todoInput = document.getElementById('todoInput');\nconst todoList = document.getElementById('todoList');\n\nlet todos = JSON.parse(localStorage.getItem('todos')) || [];\n\n// Render todos\nfunction renderTodos() {\n    todoList.innerHTML = '';\n    \n    todos.forEach((todo, index) => {\n        const li = document.createElement('li');\n        li.className = `todo-item ${todo.completed ? 'completed' : ''}`;\n        \n        li.innerHTML = `\n            <span onclick=\"toggleTodo(${index})\">${todo.text}</span>\n            <button class=\"delete-btn\" onclick=\"deleteTodo(${index})\">\n                Delete\n            </button>\n        `;\n        \n        todoList.appendChild(li);\n    });\n}\n\n// Add todo\ntodoForm.addEventListener('submit', function(e) {\n    e.preventDefault();\n    \n    const text = todoInput.value.trim();\n    if (text) {\n        todos.push({ text, completed: false });\n        saveTodos();\n        renderTodos();\n        todoInput.value = '';\n    }\n});\n\n// Toggle todo\nfunction toggleTodo(index) {\n    todos[index].completed = !todos[index].completed;\n    saveTodos();\n    renderTodos();\n}\n\n// Delete todo\nfunction deleteTodo(index) {\n    todos.splice(index, 1);\n    saveTodos();\n    renderTodos();\n}\n\n// Save to localStorage\nfunction saveTodos() {\n    localStorage.setItem('todos', JSON.stringify(todos));\n}\n\n// Initial render\nrenderTodos();\n```\n\n## Web Performance Best Practices\n\n1. **Minimize HTTP Requests**: Combine files, use sprites\n2. **Optimize Images**: Use appropriate formats (WebP), compress\n3. **Minify Code**: Remove whitespace and comments\n4. **Use CDNs**: Deliver static assets faster\n5. **Enable Caching**: Browser and server-side caching\n6. **Lazy Load Images**: Load images as needed\n7. **Defer JavaScript**: Load non-critical JS after page load\n\n## Accessibility (a11y)\n\n```html\n<!-- Semantic HTML -->\n<button>Click me</button> <!-- Not <div onclick=\"...\"> -->\n\n<!-- Alt text for images -->\n<img src=\"photo.jpg\" alt=\"Descriptive text\">\n\n<!-- ARIA labels -->\n<button aria-label=\"Close dialog\">×</button>\n\n<!-- Keyboard navigation -->\n<a href=\"#main\" class=\"skip-link\">Skip to main content</a>\n\n<!-- Form labels -->\n<label for=\"email\">Email:</label>\n<input type=\"email\" id=\"email\" name=\"email\">\n```\n\n## Resources\n\n- MDN Web Docs: https://developer.mozilla.org/\n- CSS-Tricks: https://css-tricks.com/\n- JavaScript.info: https://javascript.info/\n- Can I Use: https://caniuse.com/\n\n---\n\n**Next Module**: Front-End Framework - building modern SPAs with React!"
    },
    {
      "title": "Front-End Framework",
      "description": "React.js or Vue.js, state management",
      "duration": "4 weeks",
      "order": 2,
      "content": "# Front-End Framework: React\n\n## Introduction to React\n\nReact is a JavaScript library for building user interfaces, developed and maintained by Meta (Facebook).\n\n*Content coming soon...*"
    },
    {
      "title": "Back-End Development",
      "description": "Node.js, Express, RESTful APIs",
      "duration": "4 weeks",
      "order": 3,
      "content": "# Back-End Development\n\n## Building Server-Side Applications\n\nLearn to create robust back-end services and APIs using Node.js and Express.\n\n*Content coming soon...*"
    },
    {
      "title": "Databases",
      "description": "SQL and NoSQL databases, ORM",
      "duration": "2 weeks",
      "order": 4,
      "content": "# Databases\n\n## Data Persistence and Management\n\nMaster both relational (SQL) and non-relational (NoSQL) database systems.\n\n*Content coming soon...*"
    },
    {
      "title": "Full-Stack Project",
      "description": "Build and deploy a complete web application",
      "duration": "3 weeks",
      "order": 5,
      "content": "# Full-Stack Project\n\n## Building Your Portfolio Project\n\nApply everything you've learned to create a complete, production-ready web application.\n\n*Content coming soon...*"
    }
  ]
}

