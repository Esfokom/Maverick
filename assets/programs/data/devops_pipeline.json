{
  "id": "5",
  "name": "The DevOps Pipeline",
  "shortDescription": "Master CI/CD, automation, and modern software delivery",
  "fullDescription": "Learn to bridge development and operations with modern DevOps practices. Master continuous integration, continuous deployment, infrastructure as code, and container orchestration.",
  "duration": "9 weeks",
  "difficulty": "intermediate",
  "thumbnailPath": "assets/programs/devops.webp",
  "author": "Kumar Patel",
  "authorBio": "DevOps engineer with expertise in Kubernetes, Docker, and cloud automation. 12 years of experience scaling infrastructure for high-traffic applications.",
  "isComingSoon": false,
  "modules": [
    {
      "title": "DevOps Culture & Practices",
      "description": "Principles, culture, and collaboration strategies",
      "duration": "1 week",
      "order": 1,
      "content": "# DevOps Culture & Practices\n\n## Welcome to DevOps\n\nDevOps is not just a set of tools—it's a culture, a set of practices, and a philosophy that brings development and operations together to deliver software faster and more reliably.\n\n## What is DevOps?\n\nDevOps is the combination of cultural philosophies, practices, and tools that increases an organization's ability to deliver applications and services at high velocity.\n\n### The DevOps Lifecycle\n\n```\nPlan → Code → Build → Test → Release → Deploy → Operate → Monitor → Plan...\n```\n\n**Continuous Cycle**:\n- **Plan**: Define features and requirements\n- **Code**: Develop and version control\n- **Build**: Compile and package\n- **Test**: Automated testing\n- **Release**: Prepare for deployment\n- **Deploy**: Push to production\n- **Operate**: Manage in production\n- **Monitor**: Track performance and issues\n\n## Core DevOps Principles\n\n### 1. Collaboration\n\n**Breaking Down Silos**: Developers and operations work together throughout the entire lifecycle.\n\n**Benefits**:\n- Faster problem resolution\n- Better understanding of production needs\n- Shared responsibility for quality\n- Improved communication\n\n### 2. Automation\n\n**Automate Everything Possible**:\n- Testing\n- Building\n- Deployment\n- Infrastructure provisioning\n- Monitoring and alerts\n\n**Why Automation?**\n- Reduces human error\n- Increases speed and consistency\n- Frees time for innovation\n- Enables scaling\n\n### 3. Continuous Improvement\n\n**Kaizen Philosophy**: Small, incremental improvements\n\n**Practices**:\n- Regular retrospectives\n- Post-mortem analysis\n- Metrics-driven decisions\n- Experimentation culture\n\n### 4. Customer-Centric Action\n\n**Focus on Value Delivery**:\n- Short feedback loops\n- Rapid iteration\n- User-focused features\n- Quick response to issues\n\n### 5. Create with the End in Mind\n\n**Shift-Left Thinking**:\n- Consider operations early\n- Build for observability\n- Design for failure\n- Security from the start\n\n## The Three Ways of DevOps\n\n### First Way: Systems Thinking (Flow)\n\n**Optimize the entire value stream**, not individual departments.\n\n**Principles**:\n- Make work visible\n- Reduce batch sizes\n- Reduce intervals of work\n- Build quality in\n- Optimize for overall throughput\n\n**Metrics**:\n- Lead time\n- Deployment frequency\n- Change fail rate\n\n### Second Way: Amplify Feedback Loops\n\n**Fast feedback** at all stages.\n\n**Practices**:\n- Continuous testing\n- Monitoring and alerting\n- A/B testing\n- Customer feedback\n- Peer reviews\n\n**Benefits**:\n- Detect problems early\n- Learn quickly\n- Reduce mean time to recovery (MTTR)\n\n### Third Way: Culture of Experimentation and Learning\n\n**Encourage risk-taking** and learning from failures.\n\n**Practices**:\n- Blameless post-mortems\n- Inject faults (chaos engineering)\n- Share learnings\n- Allow time for innovation\n- Celebrate both successes and failures\n\n## DevOps vs Traditional IT\n\n| Aspect | Traditional IT | DevOps |\n|--------|---------------|--------|\n| Structure | Siloed teams | Cross-functional teams |\n| Deployment | Manual, scheduled | Automated, on-demand |\n| Release Cycle | Months/quarters | Days/hours |\n| Focus | Stability | Speed + Stability |\n| Change Management | Restrictive | Enabling |\n| Feedback | Slow | Fast |\n| Tools | Separate | Integrated |\n| Mindset | Blame culture | Learning culture |\n\n## Key Metrics (DORA Metrics)\n\n### 1. Deployment Frequency\n\n**How often**: Organizations deploy code to production\n\n**Elite**: Multiple deploys per day  \n**High**: Between once per day and once per week  \n**Medium**: Between once per week and once per month  \n**Low**: Fewer than once per month\n\n### 2. Lead Time for Changes\n\n**How long**: From code commit to running in production\n\n**Elite**: Less than one hour  \n**High**: Between one day and one week  \n**Medium**: Between one week and one month  \n**Low**: More than one month\n\n### 3. Time to Restore Service\n\n**How long**: To recover from a failure\n\n**Elite**: Less than one hour  \n**High**: Less than one day  \n**Medium**: Between one day and one week  \n**Low**: More than one week\n\n### 4. Change Failure Rate\n\n**What percentage**: Of changes result in degraded service or require remediation\n\n**Elite**: 0-15%  \n**High**: 16-30%  \n**Medium**: 16-30%  \n**Low**: 16-30%\n\n## Infrastructure as Code (IaC)\n\n**Concept**: Manage and provision infrastructure through code rather than manual processes.\n\n**Benefits**:\n- Version controlled\n- Repeatable\n- Testable\n- Self-documenting\n- Fast provisioning\n\n**Example (Terraform)**:\n```hcl\n# Define a web server\nresource \"aws_instance\" \"web\" {\n  ami           = \"ami-0c55b159cbfafe1f0\"\n  instance_type = \"t3.micro\"\n  \n  tags = {\n    Name = \"WebServer\"\n    Environment = \"Production\"\n  }\n}\n\n# Define a load balancer\nresource \"aws_lb\" \"app\" {\n  name               = \"app-lb\"\n  internal           = false\n  load_balancer_type = \"application\"\n  \n  tags = {\n    Environment = \"Production\"\n  }\n}\n```\n\n## Configuration Management\n\n**Principle**: Maintain consistent server configurations\n\n**Tools**: Ansible, Chef, Puppet, SaltStack\n\n**Example (Ansible Playbook)**:\n```yaml\n---\n- name: Configure web servers\n  hosts: webservers\n  become: yes\n  \n  tasks:\n    - name: Install Nginx\n      apt:\n        name: nginx\n        state: present\n        update_cache: yes\n    \n    - name: Start Nginx service\n      service:\n        name: nginx\n        state: started\n        enabled: yes\n    \n    - name: Copy configuration file\n      template:\n        src: nginx.conf.j2\n        dest: /etc/nginx/nginx.conf\n      notify: Restart Nginx\n  \n  handlers:\n    - name: Restart Nginx\n      service:\n        name: nginx\n        state: restarted\n```\n\n## DevOps Tool Categories\n\n### 1. Version Control\n- Git (GitHub, GitLab, Bitbucket)\n- Mercurial\n- SVN\n\n### 2. CI/CD\n- Jenkins\n- GitLab CI/CD\n- GitHub Actions\n- CircleCI\n- Travis CI\n\n### 3. Configuration Management\n- Ansible\n- Puppet\n- Chef\n- SaltStack\n\n### 4. Containerization\n- Docker\n- Podman\n- containerd\n\n### 5. Orchestration\n- Kubernetes\n- Docker Swarm\n- Amazon ECS\n\n### 6. Infrastructure as Code\n- Terraform\n- CloudFormation\n- Pulumi\n- ARM Templates\n\n### 7. Monitoring & Logging\n- Prometheus + Grafana\n- ELK Stack (Elasticsearch, Logstash, Kibana)\n- Datadog\n- New Relic\n\n### 8. Cloud Platforms\n- AWS\n- Azure\n- Google Cloud Platform\n- DigitalOcean\n\n## Building a DevOps Culture\n\n### 1. Start Small\n- Choose one team/project\n- Implement one practice at a time\n- Demonstrate value\n- Expand gradually\n\n### 2. Measure Everything\n- Define baseline metrics\n- Track improvements\n- Share results\n- Celebrate wins\n\n### 3. Foster Collaboration\n- Cross-functional teams\n- Shared goals and KPIs\n- Regular sync meetings\n- Collaborative tools\n\n### 4. Embrace Failure\n- Blameless post-mortems\n- Document learnings\n- Share knowledge\n- Improve processes\n\n### 5. Continuous Learning\n- Training programs\n- Conference attendance\n- Internal knowledge sharing\n- Experimentation time\n\n## DevOps Anti-Patterns\n\n❌ **DevOps Team as a Silo**: Creating a separate DevOps team defeats the purpose  \n❌ **Tools Over Culture**: Buying tools without changing culture  \n❌ **Big Bang Approach**: Trying to change everything at once  \n❌ **Ignoring Security**: Security should be integrated (DevSecOps)  \n❌ **No Monitoring**: \"It works on my machine\" syndrome  \n❌ **Manual Processes**: Not automating repetitive tasks  \n❌ **Blame Culture**: Pointing fingers instead of learning  \n\n## DevSecOps: Security in DevOps\n\n**Shift Security Left**: Integrate security early in the development process\n\n**Practices**:\n- Static code analysis (SAST)\n- Dynamic application security testing (DAST)\n- Dependency scanning\n- Container image scanning\n- Infrastructure security scanning\n- Compliance as code\n\n**Security in CI/CD**:\n```yaml\n# Example: Security checks in pipeline\nstages:\n  - lint\n  - security-scan\n  - build\n  - test\n  - deploy\n\nsecurity-scan:\n  stage: security-scan\n  script:\n    - echo \"Running security scans...\"\n    - npm audit  # Check dependencies\n    - docker scan myapp:latest  # Scan container\n    - terraform validate  # Validate IaC\n```\n\n## Case Study: Netflix DevOps\n\n**Challenge**: Deploy hundreds of times per day to serve 200M+ users\n\n**Solutions**:\n- Microservices architecture\n- Automated testing at scale\n- Chaos Engineering (Chaos Monkey)\n- Full cycle developers (own what you build)\n- Automated canary deployments\n- Real-time monitoring\n\n**Results**:\n- 99.99% availability\n- Thousands of deployments per day\n- Fast innovation\n\n## Getting Started Checklist\n\n✅ **Version control everything** (code, configs, docs)  \n✅ **Automate build process**  \n✅ **Implement automated testing**  \n✅ **Set up CI/CD pipeline**  \n✅ **Monitor applications and infrastructure**  \n✅ **Use infrastructure as code**  \n✅ **Implement logging and alerting**  \n✅ **Practice blameless post-mortems**  \n✅ **Measure key metrics**  \n✅ **Continuously improve**  \n\n## Practical Exercise\n\n**Task**: Create a DevOps improvement plan for a fictional project\n\n1. **Current State Assessment**\n   - How are deployments currently done?\n   - What's the deployment frequency?\n   - How long does a deployment take?\n   - What's the failure rate?\n\n2. **Identify Bottlenecks**\n   - Manual steps\n   - Long build times\n   - Slow tests\n   - Manual approvals\n\n3. **Define Goals**\n   - Target deployment frequency\n   - Target lead time\n   - Target MTTR\n\n4. **Action Plan**\n   - Quick wins (within 1 month)\n   - Medium-term improvements (1-3 months)\n   - Long-term transformation (3-6 months)\n\n5. **Success Metrics**\n   - How will you measure success?\n   - What dashboards will you create?\n\n## Resources\n\n- The Phoenix Project (Book): https://itrevolution.com/the-phoenix-project/\n- DevOps Handbook: https://itrevolution.com/the-devops-handbook/\n- DORA Research: https://www.devops-research.com/research.html\n- AWS DevOps Resources: https://aws.amazon.com/devops/\n\n---\n\n**Next Module**: Version Control & Git - mastering the foundation of modern development!"
    },
    {
      "title": "Version Control & Git",
      "description": "Advanced Git workflows and branching strategies",
      "duration": "2 weeks",
      "order": 2,
      "content": "# Version Control & Git\n\n## Introduction to Version Control\n\nVersion control is the practice of tracking and managing changes to code over time.\n\n*Content coming soon...*"
    },
    {
      "title": "CI/CD Pipelines",
      "description": "Jenkins, GitHub Actions, GitLab CI",
      "duration": "2 weeks",
      "order": 3,
      "content": "# CI/CD Pipelines\n\n## Continuous Integration & Continuous Deployment\n\nCI/CD automates the process of integrating code changes, testing, and deploying to production.\n\n*Content coming soon...*"
    },
    {
      "title": "Containers & Orchestration",
      "description": "Docker, Kubernetes, and container management",
      "duration": "2 weeks",
      "order": 4,
      "content": "# Containers & Orchestration\n\n## Container Technology\n\nContainers package applications with all dependencies for consistent deployment across environments.\n\n*Content coming soon...*"
    },
    {
      "title": "Infrastructure as Code",
      "description": "Terraform, Ansible, and automation",
      "duration": "2 weeks",
      "order": 5,
      "content": "# Infrastructure as Code\n\n## Automating Infrastructure Provisioning\n\nIaC enables you to manage infrastructure through code, making it version-controlled, repeatable, and testable.\n\n*Content coming soon...*"
    }
  ]
}

