{
  "id": "3",
  "name": "Cyber Sentinel",
  "shortDescription": "Become a cybersecurity expert and protect digital assets",
  "fullDescription": "Develop comprehensive cybersecurity skills to protect organizations from modern threats. Learn ethical hacking, penetration testing, security architecture, and incident response.",
  "duration": "14 weeks",
  "difficulty": "intermediate",
  "thumbnailPath": "assets/programs/cyber.webp",
  "author": "Alex Rodriguez",
  "authorBio": "CISSP and CEH certified cybersecurity professional with extensive experience in penetration testing and security consulting. Former security lead at government agencies.",
  "isComingSoon": false,
  "modules": [
    {
      "title": "Cybersecurity Fundamentals",
      "description": "Threat landscape, security principles, and CIA triad",
      "duration": "2 weeks",
      "order": 1,
      "content": "# Cybersecurity Fundamentals\n\n## Welcome to Cybersecurity\n\nIn our increasingly digital world, cybersecurity has become one of the most critical fields in technology. This module will introduce you to the fundamental concepts, principles, and practices that form the foundation of cybersecurity.\n\n## The CIA Triad\n\nThe CIA triad is the cornerstone of information security:\n\n### Confidentiality\n\n**Definition**: Ensuring that information is accessible only to those authorized to access it.\n\n**Threats**:\n- Unauthorized access\n- Data breaches\n- Social engineering\n- Insider threats\n\n**Controls**:\n- Encryption (AES-256, RSA)\n- Access control lists (ACLs)\n- Authentication mechanisms\n- Data classification\n\n**Example: File Encryption**\n\n```python\nfrom cryptography.fernet import Fernet\n\n# Generate encryption key\nkey = Fernet.generate_key()\ncipher = Fernet(key)\n\n# Encrypt sensitive data\ndata = b\"Sensitive customer information\"\nencrypted = cipher.encrypt(data)\nprint(f\"Encrypted: {encrypted}\")\n\n# Decrypt data\ndecrypted = cipher.decrypt(encrypted)\nprint(f\"Decrypted: {decrypted.decode()}\")\n```\n\n### Integrity\n\n**Definition**: Maintaining the accuracy and completeness of data throughout its lifecycle.\n\n**Threats**:\n- Unauthorized modifications\n- Data corruption\n- Man-in-the-middle attacks\n- Malware\n\n**Controls**:\n- Hashing (SHA-256, SHA-3)\n- Digital signatures\n- Version control\n- Checksums\n- Access controls\n\n**Example: Data Integrity Verification**\n\n```python\nimport hashlib\nimport hmac\n\ndef calculate_hash(data):\n    \"\"\"Calculate SHA-256 hash of data\"\"\"\n    return hashlib.sha256(data.encode()).hexdigest()\n\ndef verify_integrity(data, expected_hash):\n    \"\"\"Verify data hasn't been tampered with\"\"\"\n    actual_hash = calculate_hash(data)\n    return actual_hash == expected_hash\n\n# Original data\noriginal_data = \"Important financial record\"\noriginal_hash = calculate_hash(original_data)\nprint(f\"Original hash: {original_hash}\")\n\n# Verify integrity\nif verify_integrity(original_data, original_hash):\n    print(\"✓ Data integrity verified\")\nelse:\n    print(\"✗ Data has been tampered with!\")\n\n# Detect tampering\ntampered_data = \"Important financial record - MODIFIED\"\nif verify_integrity(tampered_data, original_hash):\n    print(\"✓ Data integrity verified\")\nelse:\n    print(\"✗ Data has been tampered with!\")\n```\n\n### Availability\n\n**Definition**: Ensuring that information and resources are accessible when needed.\n\n**Threats**:\n- Denial of Service (DoS) attacks\n- Distributed Denial of Service (DDoS)\n- Hardware failures\n- Natural disasters\n- Power outages\n\n**Controls**:\n- Redundancy and backups\n- Load balancing\n- Disaster recovery plans\n- Uninterruptible power supplies (UPS)\n- DDoS mitigation services\n\n## The Threat Landscape\n\n### Common Attack Vectors\n\n#### 1. Phishing\n\n**Description**: Deceptive emails or messages to trick users into revealing sensitive information\n\n**Types**:\n- Email phishing\n- Spear phishing (targeted)\n- Whaling (targeting executives)\n- Smishing (SMS phishing)\n- Vishing (voice phishing)\n\n**Red Flags**:\n```\n✗ Urgent requests for action\n✗ Suspicious sender addresses\n✗ Generic greetings\n✗ Spelling/grammar errors\n✗ Unexpected attachments\n✗ Requests for sensitive information\n```\n\n#### 2. Malware\n\n**Types**:\n- **Virus**: Attaches to files and spreads\n- **Worm**: Self-replicates across networks\n- **Trojan**: Disguised as legitimate software\n- **Ransomware**: Encrypts data and demands payment\n- **Spyware**: Monitors user activity\n- **Rootkit**: Hides malicious activities\n- **Keylogger**: Records keystrokes\n\n**Example: Basic Malware Detection Script**\n\n```python\nimport hashlib\nimport os\n\n# Known malware signatures (SHA-256 hashes)\nMALWARE_SIGNATURES = {\n    'a1b2c3d4e5f6...': 'Trojan.GenericKD',\n    'f6e5d4c3b2a1...': 'Ransomware.WannaCry',\n}\n\ndef scan_file(filepath):\n    \"\"\"Scan file for known malware signatures\"\"\"\n    with open(filepath, 'rb') as f:\n        file_hash = hashlib.sha256(f.read()).hexdigest()\n    \n    if file_hash in MALWARE_SIGNATURES:\n        malware_name = MALWARE_SIGNATURES[file_hash]\n        print(f\"⚠️ MALWARE DETECTED: {malware_name}\")\n        print(f\"File: {filepath}\")\n        return True\n    return False\n\ndef scan_directory(directory):\n    \"\"\"Recursively scan directory for malware\"\"\"\n    infected_files = []\n    \n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            filepath = os.path.join(root, file)\n            try:\n                if scan_file(filepath):\n                    infected_files.append(filepath)\n            except Exception as e:\n                print(f\"Error scanning {filepath}: {e}\")\n    \n    return infected_files\n```\n\n#### 3. SQL Injection\n\n**Description**: Inserting malicious SQL code into application queries\n\n**Vulnerable Code**:\n\n```python\n# ❌ VULNERABLE - Never do this!\nimport sqlite3\n\ndef get_user_data(username):\n    conn = sqlite3.connect('database.db')\n    cursor = conn.cursor()\n    \n    # Vulnerable to SQL injection\n    query = f\"SELECT * FROM users WHERE username = '{username}'\"\n    cursor.execute(query)\n    \n    return cursor.fetchall()\n\n# Attack: username = \"admin' OR '1'='1\"\n# Results in: SELECT * FROM users WHERE username = 'admin' OR '1'='1'\n# Returns all users!\n```\n\n**Secure Code**:\n\n```python\n# ✅ SECURE - Use parameterized queries\ndef get_user_data_secure(username):\n    conn = sqlite3.connect('database.db')\n    cursor = conn.cursor()\n    \n    # Parameterized query prevents injection\n    query = \"SELECT * FROM users WHERE username = ?\"\n    cursor.execute(query, (username,))\n    \n    return cursor.fetchall()\n```\n\n#### 4. Cross-Site Scripting (XSS)\n\n**Description**: Injecting malicious scripts into web pages viewed by other users\n\n**Types**:\n- **Stored XSS**: Script stored in database\n- **Reflected XSS**: Script in URL parameters\n- **DOM-based XSS**: Client-side script manipulation\n\n**Prevention**:\n\n```python\nimport html\n\n# ❌ VULNERABLE\ndef display_comment_vulnerable(comment):\n    return f\"<div>{comment}</div>\"\n\n# ✅ SECURE - Escape user input\ndef display_comment_secure(comment):\n    escaped_comment = html.escape(comment)\n    return f\"<div>{escaped_comment}</div>\"\n\n# Attack input: <script>alert('XSS')</script>\n# Vulnerable output: <div><script>alert('XSS')</script></div>\n# Secure output: <div>&lt;script&gt;alert('XSS')&lt;/script&gt;</div>\n```\n\n## Security Principles\n\n### 1. Defense in Depth\n\n**Concept**: Multiple layers of security controls\n\n**Layers**:\n1. Physical security\n2. Network security\n3. Host security\n4. Application security\n5. Data security\n\n**Example**:\n```\nUser → Firewall → IDS/IPS → Web Application Firewall → \n       Load Balancer → Application Server (with input validation) → \n       Database (with encryption and access controls)\n```\n\n### 2. Least Privilege\n\n**Concept**: Users should have only the minimum access necessary\n\n**Implementation**:\n\n```python\n# Example: Role-based access control\n\nclass User:\n    def __init__(self, username, role):\n        self.username = username\n        self.role = role\n\nclass Permission:\n    READ = 'read'\n    WRITE = 'write'\n    DELETE = 'delete'\n    ADMIN = 'admin'\n\nROLE_PERMISSIONS = {\n    'viewer': [Permission.READ],\n    'editor': [Permission.READ, Permission.WRITE],\n    'admin': [Permission.READ, Permission.WRITE, Permission.DELETE, Permission.ADMIN]\n}\n\ndef check_permission(user, required_permission):\n    \"\"\"Check if user has required permission\"\"\"\n    user_permissions = ROLE_PERMISSIONS.get(user.role, [])\n    return required_permission in user_permissions\n\ndef delete_file(user, filename):\n    if not check_permission(user, Permission.DELETE):\n        raise PermissionError(f\"{user.username} does not have delete permission\")\n    \n    # Proceed with deletion\n    print(f\"Deleting {filename}...\")\n\n# Usage\nviewer = User('john', 'viewer')\neditor = User('jane', 'editor')\nadmin = User('alice', 'admin')\n\ntry:\n    delete_file(viewer, 'document.txt')  # Raises PermissionError\nexcept PermissionError as e:\n    print(f\"Access denied: {e}\")\n\ndelete_file(admin, 'document.txt')  # Success\n```\n\n### 3. Separation of Duties\n\n**Concept**: Critical tasks should require multiple people\n\n**Examples**:\n- Financial transactions require approval\n- Code deployment requires review\n- Administrative changes require dual authorization\n\n### 4. Security by Design\n\n**Concept**: Build security into systems from the start\n\n**Principles**:\n- Secure defaults\n- Fail securely\n- Complete mediation\n- Open design\n- Psychological acceptability\n\n## Authentication vs Authorization\n\n### Authentication\n\n**What it is**: Verifying identity (\"Who are you?\")\n\n**Methods**:\n\n1. **Something you know**: Password, PIN\n2. **Something you have**: Token, smart card, phone\n3. **Something you are**: Biometrics (fingerprint, face)\n\n**Multi-Factor Authentication (MFA)**:\n\n```python\nimport pyotp\nimport qrcode\n\ndef setup_2fa(username):\n    \"\"\"Setup TOTP-based 2FA\"\"\"\n    # Generate secret key\n    secret = pyotp.random_base32()\n    \n    # Create TOTP object\n    totp = pyotp.TOTP(secret)\n    \n    # Generate QR code for authenticator app\n    uri = totp.provisioning_uri(username, issuer_name=\"MyApp\")\n    qr = qrcode.make(uri)\n    qr.save(f\"{username}_2fa_qr.png\")\n    \n    return secret\n\ndef verify_2fa_code(secret, code):\n    \"\"\"Verify 2FA code\"\"\"\n    totp = pyotp.TOTP(secret)\n    return totp.verify(code)\n\n# Setup\nuser_secret = setup_2fa('alice@example.com')\nprint(f\"Secret key: {user_secret}\")\n\n# Verification\nuser_code = input(\"Enter 2FA code: \")\nif verify_2fa_code(user_secret, user_code):\n    print(\"✓ Authentication successful\")\nelse:\n    print(\"✗ Invalid code\")\n```\n\n### Authorization\n\n**What it is**: Determining access rights (\"What can you do?\")\n\n**Models**:\n- Discretionary Access Control (DAC)\n- Mandatory Access Control (MAC)\n- Role-Based Access Control (RBAC)\n- Attribute-Based Access Control (ABAC)\n\n## Security Frameworks and Standards\n\n### NIST Cybersecurity Framework\n\n**Core Functions**:\n1. **Identify**: Asset management, risk assessment\n2. **Protect**: Access control, training, data security\n3. **Detect**: Monitoring, detection processes\n4. **Respond**: Response planning, communications\n5. **Recover**: Recovery planning, improvements\n\n### ISO 27001\n\nInternational standard for information security management systems (ISMS)\n\n### OWASP Top 10\n\nMost critical web application security risks:\n\n1. Broken Access Control\n2. Cryptographic Failures\n3. Injection\n4. Insecure Design\n5. Security Misconfiguration\n6. Vulnerable and Outdated Components\n7. Identification and Authentication Failures\n8. Software and Data Integrity Failures\n9. Security Logging and Monitoring Failures\n10. Server-Side Request Forgery (SSRF)\n\n## Incident Response\n\n### IR Lifecycle\n\n1. **Preparation**: Policies, tools, training\n2. **Detection & Analysis**: Identify and assess incidents\n3. **Containment**: Limit damage\n4. **Eradication**: Remove threat\n5. **Recovery**: Restore systems\n6. **Lessons Learned**: Improve processes\n\n**Basic Incident Log**:\n\n```python\nimport datetime\nimport json\n\nclass SecurityIncident:\n    def __init__(self, incident_type, severity, description):\n        self.id = datetime.datetime.now().strftime('%Y%m%d%H%M%S')\n        self.timestamp = datetime.datetime.now().isoformat()\n        self.type = incident_type\n        self.severity = severity  # Low, Medium, High, Critical\n        self.description = description\n        self.status = 'Open'\n        self.actions = []\n    \n    def add_action(self, action):\n        self.actions.append({\n            'timestamp': datetime.datetime.now().isoformat(),\n            'action': action\n        })\n    \n    def close(self, resolution):\n        self.status = 'Closed'\n        self.resolution = resolution\n        self.closed_at = datetime.datetime.now().isoformat()\n    \n    def to_dict(self):\n        return self.__dict__\n\n# Example usage\nincident = SecurityIncident(\n    incident_type='Malware Detection',\n    severity='High',\n    description='Ransomware detected on workstation-042'\n)\n\nincident.add_action('Isolated affected workstation from network')\nincident.add_action('Initiated malware removal procedures')\nincident.add_action('Restored from backup')\n\nincident.close('Malware removed, system restored and verified clean')\n\nprint(json.dumps(incident.to_dict(), indent=2))\n```\n\n## Best Practices\n\n✅ **Use strong, unique passwords**  \n✅ **Enable multi-factor authentication**  \n✅ **Keep software updated**  \n✅ **Regular backups (3-2-1 rule)**  \n✅ **Principle of least privilege**  \n✅ **Encrypt sensitive data**  \n✅ **Regular security training**  \n✅ **Monitor and log activities**  \n✅ **Incident response plan**  \n✅ **Security audits and assessments**  \n\n## Hands-On Lab\n\n**Exercise**: Create a simple password strength checker\n\n```python\nimport re\n\ndef check_password_strength(password):\n    \"\"\"\n    Check password strength based on common criteria\n    \"\"\"\n    score = 0\n    feedback = []\n    \n    # Length check\n    if len(password) >= 12:\n        score += 2\n    elif len(password) >= 8:\n        score += 1\n    else:\n        feedback.append(\"Password should be at least 8 characters\")\n    \n    # Uppercase check\n    if re.search(r'[A-Z]', password):\n        score += 1\n    else:\n        feedback.append(\"Add uppercase letters\")\n    \n    # Lowercase check\n    if re.search(r'[a-z]', password):\n        score += 1\n    else:\n        feedback.append(\"Add lowercase letters\")\n    \n    # Digit check\n    if re.search(r'\\d', password):\n        score += 1\n    else:\n        feedback.append(\"Add numbers\")\n    \n    # Special character check\n    if re.search(r'[!@#$%^&*(),.?\":{}|<>]', password):\n        score += 1\n    else:\n        feedback.append(\"Add special characters\")\n    \n    # Determine strength\n    if score >= 5:\n        strength = \"Strong\"\n    elif score >= 3:\n        strength = \"Medium\"\n    else:\n        strength = \"Weak\"\n    \n    return {\n        'strength': strength,\n        'score': score,\n        'feedback': feedback\n    }\n\n# Test\npasswords = [\n    'password',\n    'Password1',\n    'P@ssw0rd123',\n    'MyS3cur3P@ssw0rd!2024'\n]\n\nfor pwd in passwords:\n    result = check_password_strength(pwd)\n    print(f\"\\nPassword: {pwd}\")\n    print(f\"Strength: {result['strength']} (Score: {result['score']}/6)\")\n    if result['feedback']:\n        print(\"Suggestions:\")\n        for suggestion in result['feedback']:\n            print(f\"  - {suggestion}\")\n```\n\n## Resources\n\n- NIST Cybersecurity Framework: https://www.nist.gov/cyberframework\n- OWASP: https://owasp.org/\n- SANS Institute: https://www.sans.org/\n- Krebs on Security: https://krebsonsecurity.com/\n\n---\n\n**Next Module**: Network Security - where you'll learn to secure networks and infrastructure!"
    },
    {
      "title": "Network Security",
      "description": "Firewalls, VPNs, IDS/IPS systems",
      "duration": "3 weeks",
      "order": 2,
      "content": "# Network Security\n\n## Securing Network Infrastructure\n\nLearn to protect networks from unauthorized access, attacks, and data breaches.\n\n*Content coming soon...*"
    },
    {
      "title": "Ethical Hacking",
      "description": "Penetration testing methodologies and tools",
      "duration": "3 weeks",
      "order": 3,
      "content": "# Ethical Hacking\n\n## Penetration Testing Fundamentals\n\nLearn ethical hacking techniques to identify and remediate security vulnerabilities.\n\n*Content coming soon...*"
    },
    {
      "title": "Application Security",
      "description": "OWASP Top 10, secure coding practices",
      "duration": "3 weeks",
      "order": 4,
      "content": "# Application Security\n\n## Secure Software Development\n\nMaster secure coding practices and application security testing.\n\n*Content coming soon...*"
    },
    {
      "title": "Incident Response & Forensics",
      "description": "Handling security breaches and digital forensics",
      "duration": "3 weeks",
      "order": 5,
      "content": "# Incident Response & Forensics\n\n## Responding to Security Incidents\n\nLearn to detect, respond to, and investigate security incidents.\n\n*Content coming soon...*"
    }
  ]
}

